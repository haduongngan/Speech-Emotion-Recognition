basePath: /api/v1
definitions:
  controller.TokenPayload:
    properties:
      refreshToken:
        type: string
    type: object
  model.Call:
    properties:
      duration:
        type: string
      emotion:
        type: string
      id:
        type: integer
      phone:
        type: string
      staffEmotion:
        type: string
      staffId:
        type: integer
      startTime:
        type: string
    type: object
  model.CallTimeFilterPayload:
    properties:
      endTime:
        type: string
      phone:
        type: string
      startTime:
        type: string
    type: object
  model.CreateResponse:
    properties:
      companyName:
        type: string
      id:
        type: integer
      message:
        type: string
      role:
        type: string
      success:
        type: boolean
      username:
        type: string
    type: object
  model.Customer:
    properties:
      id:
        type: integer
      phone:
        type: string
      userId:
        type: integer
    type: object
  model.CustomerPhoneUpdate:
    properties:
      id:
        type: integer
      phone:
        type: string
    type: object
  model.HistoryPayload:
    properties:
      phone:
        type: string
    type: object
  model.LoginResponse:
    properties:
      code:
        type: string
      companyName:
        type: string
      message:
        type: string
      refreshToken:
        type: string
      role:
        type: string
      success:
        type: boolean
      token:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  model.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  model.Segment:
    properties:
      callId:
        type: integer
      emotion:
        type: string
      id:
        type: integer
      segNum:
        type: integer
    type: object
  model.Staff:
    properties:
      id:
        type: integer
      name:
        type: string
      userId:
        type: integer
    type: object
  model.StaffCallFilterPayload:
    properties:
      endTime:
        type: string
      startTime:
        type: string
      userId:
        type: integer
    type: object
  model.StaffNameUpdate:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.User:
    properties:
      companyName:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  model.UserPayload:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:19001
info:
  contact: {}
  description: SPSER - Speech Emotion Recognition Service.
  title: Speech Emotion Recognition APIs
  version: "1.0"
paths:
  /call/{id}:
    get:
      consumes:
      - application/json
      description: input id => Call
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get a call by id
      tags:
      - call-manager-apis
  /call/all:
    get:
      consumes:
      - application/json
      description: input none => []Call
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all calls
      tags:
      - call-manager-apis
  /call/create:
    post:
      consumes:
      - application/json
      description: input Call => Call
      parameters:
      - description: Call
        in: body
        name: call
        required: true
        schema:
          $ref: '#/definitions/model.Call'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create a call
      tags:
      - call-manager-apis
  /call/delete/{id}:
    delete:
      consumes:
      - application/json
      description: input id => delete Call
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete a call
      tags:
      - call-manager-apis
  /call/multi/create:
    post:
      consumes:
      - application/json
      description: input []Call => add []Call
      parameters:
      - description: Calls info
        in: body
        name: calls
        required: true
        schema:
          items:
            $ref: '#/definitions/model.Call'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create multiple calls
      tags:
      - call-manager-apis
  /call/update:
    put:
      consumes:
      - application/json
      description: input Call => update Call
      parameters:
      - description: Call
        in: body
        name: call
        required: true
        schema:
          $ref: '#/definitions/model.Call'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update a call
      tags:
      - call-manager-apis
  /customer/{id}:
    get:
      consumes:
      - application/json
      description: Get one customer
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get one customer
      tags:
      - customer-manager-apis
  /customer/all:
    get:
      consumes:
      - application/json
      description: Get all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all customers
      tags:
      - customer-manager-apis
  /customer/calls:
    put:
      consumes:
      - application/json
      description: Get all calls of an user with id
      parameters:
      - description: Customer's phone number
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/model.HistoryPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all calls of an user with id
      tags:
      - customer-manager-apis
  /customer/calls/filter:
    put:
      consumes:
      - application/json
      description: model.CallTimeFilterPayload => []Call
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.CallTimeFilterPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all calls in timeframe of an user with id
      tags:
      - customer-manager-apis
  /customer/create:
    post:
      consumes:
      - application/json
      description: Get all customers
      parameters:
      - description: customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/model.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all customers
      tags:
      - customer-manager-apis
  /customer/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete one customer
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete one customer
      tags:
      - customer-manager-apis
  /customer/update:
    put:
      consumes:
      - application/json
      description: Update one customer
      parameters:
      - description: customer id and phone info
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/model.CustomerPhoneUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update one customer
      tags:
      - customer-manager-apis
  /file/storage/{id}:
    delete:
      consumes:
      - application/json
      description: Delete file
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: type
        enum:
        - sound
        in: query
        name: type
        required: true
        type: string
      - description: name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete file
      tags:
      - file-manager-apis
  /file/storage/multi/{id}:
    post:
      consumes:
      - application/json
      description: Import file
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: file data
        in: formData
        name: file
        required: true
        type: file
      - description: type
        enum:
        - sound
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Import file
      tags:
      - file-manager-apis
  /segment/{id}:
    get:
      consumes:
      - application/json
      description: input id => Segment
      parameters:
      - description: Segment Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get segment with Id
      tags:
      - segment-manager-apis
  /segment/all:
    get:
      consumes:
      - application/json
      description: input none => []Segment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all segments
      tags:
      - segment-manager-apis
  /segment/call/{callId}:
    get:
      consumes:
      - application/json
      description: input callId => []Segment
      parameters:
      - description: Call Id
        in: path
        name: callId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get segment with CallId
      tags:
      - segment-manager-apis
  /segment/create:
    post:
      consumes:
      - application/json
      description: input segmentInfo => Segment
      parameters:
      - description: Segment info
        in: body
        name: segmentInfo
        required: true
        schema:
          $ref: '#/definitions/model.Segment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create segment
      tags:
      - segment-manager-apis
  /segment/create/multi:
    post:
      consumes:
      - application/json
      description: input segmentInfo => []Segment
      parameters:
      - description: Segment info
        in: body
        name: segmentInfo
        required: true
        schema:
          items:
            $ref: '#/definitions/model.Segment'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create multiple segments
      tags:
      - segment-manager-apis
  /segment/delete/{id}:
    delete:
      consumes:
      - application/json
      description: input id => deleted segment
      parameters:
      - description: Segment Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: deletes one segment from db with id
      tags:
      - segment-manager-apis
  /segment/emo/{id}:
    get:
      consumes:
      - application/json
      description: input id => emotion
      parameters:
      - description: Segment Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get segment emotion with Id
      tags:
      - segment-manager-apis
  /staff/{id}:
    get:
      consumes:
      - application/json
      description: Get one Staff
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get one Staff
      tags:
      - staff-manager-apis
  /staff/all:
    get:
      consumes:
      - application/json
      description: Get all Staffs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all Staffs
      tags:
      - staff-manager-apis
  /staff/calls:
    put:
      consumes:
      - application/json
      description: Get all calls of an user with id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all calls of an user with id
      tags:
      - staff-manager-apis
  /staff/create:
    post:
      consumes:
      - application/json
      description: Get all Staffs
      parameters:
      - description: Staff
        in: body
        name: Staff
        required: true
        schema:
          $ref: '#/definitions/model.Staff'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all Staffs
      tags:
      - staff-manager-apis
  /staff/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete one Staff
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete one Staff
      tags:
      - staff-manager-apis
  /staff/filter/calls:
    put:
      consumes:
      - application/json
      description: model.CallTimeFilterPayload => []Call
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.StaffCallFilterPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all calls in timeframe of an user with id
      tags:
      - staff-manager-apis
  /staff/update:
    put:
      consumes:
      - application/json
      description: Update one Staff
      parameters:
      - description: Staff
        in: body
        name: staffName
        required: true
        schema:
          $ref: '#/definitions/model.StaffNameUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update one Staff
      tags:
      - staff-manager-apis
  /user/all:
    get:
      consumes:
      - application/json
      description: returns all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: returns all users
      tags:
      - user-manager-apis
  /user/create:
    post:
      consumes:
      - application/json
      description: creates new user
      parameters:
      - description: User information
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CreateResponse'
      security:
      - ApiKeyAuth: []
      summary: creates new user
      tags:
      - user-manager-apis
  /user/delete/{uid}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: delete user
      tags:
      - user-manager-apis
  /user/login:
    post:
      consumes:
      - application/json
      description: log user in
      parameters:
      - description: username & password
        in: body
        name: LoginPayload
        required: true
        schema:
          $ref: '#/definitions/model.UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: log user in
      tags:
      - user-manager-apis
  /user/login/jwt:
    post:
      consumes:
      - application/json
      description: login user, return new token string jwt
      parameters:
      - description: Insert your access token
        in: body
        name: TokenPayload
        required: true
        schema:
          $ref: '#/definitions/controller.TokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
      summary: login user
      tags:
      - user-manager-apis
  /user/wname:
    get:
      consumes:
      - application/json
      description: input username => user
      parameters:
      - description: username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: get user with usn
      tags:
      - user-manager-apis
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
